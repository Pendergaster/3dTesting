#version 330 core

uniform sampler2D tex;
//uniform	vec3 ObjColor;
//uniform vec3 LightColor;
//uniform vec3 LightPos;
uniform vec3 ViewPos; // if you calculate in view matrix this is not needed


struct Material {
   // vec3 ambient;
   // vec3 diffuse; TODO SAMPLER THIS
    vec3 specular;
    float shininess;
}; 
struct Light {
    vec3 position;
	//vec3 direction;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
	float constant;
    float linear;
    float quadratic;
};

uniform Light light;  

uniform Material material;


in DATA
{
	vec2 uv;
	vec3 normal;
	vec3 WorldSpacePos;
} frag_in;

out vec4 Color;

//const float ambientStrength = 0.3;
//const float specularStrength = 0.5;


void main()
{
	float distance = length(light.position - frag_in.WorldSpacePos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + 
    		    light.quadratic * (distance * distance));    
	
	
	vec3 norm = normalize(frag_in.normal);
	vec3 lightDir = normalize(light.position - frag_in.WorldSpacePos);  
	//vec3 lightDir = normalize(-light.direction);
	float diff = max(dot(norm, lightDir), 0.0);
	
	
	vec3 viewDir = normalize(ViewPos - frag_in.WorldSpacePos);
	vec3 reflectDir = reflect(-lightDir, frag_in.normal); 
	
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);//is shininess value of highlight
	
	vec4 t = texture2D(tex,frag_in.uv);
	
	vec3 specular = light.specular * (material.specular * spec);  
	vec3 diffuse = light.diffuse * diff * vec3(t); //(diff /** material.diffuse**/)
	vec3 ambient = light.ambient * vec3(t);
	
	ambient  *= attenuation; 
	diffuse  *= attenuation;
	specular *= attenuation;  
	
	
	Color = t * vec4((ambient + diffuse + specular),1.f);//ObjColor * 
}
