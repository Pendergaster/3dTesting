#version 330 core


struct Material {
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
	float constant;
    float linear;
    float quadratic;
};

struct GlobalLight{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform vec3 ViewPos; // if you calculate in view matrix this is not needed
uniform Light light;  
uniform Material material;
uniform GlobalLight glight;


in DATA
{
	vec3 normal;
	vec3 WorldSpacePos;
} frag_in;

out vec4 Color;

vec3 calculate_global_light(GlobalLight global,vec3 normal, vec3 viewDir)
{
	  vec3 lightDir = normalize(-global.direction);
	  
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // combine results
    vec3 ambient  = global.ambient  * material.diffuse;//vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse  = global.diffuse  * diff * material.diffuse;//vec3(texture(material.diffuse, TexCoords));
    vec3 specular = global.specular * spec * material.specular;//vec3(texture(material.specular, TexCoords));
    return (ambient + diffuse+ specular);
}

vec3 calculate_point_light(Light pl,vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(pl.position - fragPos);
	float diff = max(dot(normal,lightDir),0.0);

    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // attenuation
    float distance = length(pl.position - fragPos);
    float attenuation = 1.0 / (pl.constant + pl.linear * distance + pl.quadratic * (distance * distance));    
    // combine results
    vec3 ambient = light.ambient * material.diffuse;//vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse = light.diffuse * diff * material.diffuse;//vec3(texture(material.diffuse, TexCoords));
    vec3 specular = light.specular * spec * material.specular;//vec3(texture(material.specular, TexCoords));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}

void main()
{
	vec3 norm = normalize(frag_in.normal);
	vec3 viewDir = normalize(ViewPos - frag_in.WorldSpacePos);

	vec3 result = calculate_global_light(glight,norm,viewDir);

	result += calculate_point_light(light,norm,frag_in.WorldSpacePos,viewDir);

	Color = vec4((result),1.f);
}
