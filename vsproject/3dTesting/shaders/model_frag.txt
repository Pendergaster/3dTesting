#version 330 core


struct Material {
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 
struct Light {
    vec3 position;
    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
	float constant;
    float linear;
    float quadratic;
};

uniform vec3 ViewPos; // if you calculate in view matrix this is not needed
uniform Light light;  
///uniform vec4 color; same as material diffuse
uniform Material material;


in DATA
{
	vec3 normal;
	vec3 WorldSpacePos;
} frag_in;

out vec4 Color;


void main()
{
	float distance = length(light.position - frag_in.WorldSpacePos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + 
    		    light.quadratic * (distance * distance));    
	
	
	vec3 norm = normalize(frag_in.normal);
	vec3 lightDir = normalize(light.position - frag_in.WorldSpacePos);  
	float diff = max(dot(norm, lightDir), 0.0);
	
	vec3 viewDir = normalize(ViewPos - frag_in.WorldSpacePos);
	vec3 reflectDir = reflect(-lightDir, frag_in.normal); 
	
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);	//is shininess value of highlight
	
	vec3 specular = light.specular * (material.specular * spec);  
	vec3 diffuse = light.diffuse * diff * material.diffuse; 					// diffuse is texture
	vec3 ambient = light.ambient * material.diffuse;
	
	ambient  *= attenuation; 
	diffuse  *= attenuation;
	specular *= attenuation;  
	
	
	Color = vec4((ambient + diffuse + specular),1.f); 
}
