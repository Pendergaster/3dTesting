#version 330 core


struct Material {
    vec3 diffuse;
    vec3 specular;
    float shininess;
}; 

struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
	float constant;
    float linear;
    float quadratic;
};

struct GlobalLight{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform vec3 ViewPos; // if you calculate in view matrix this is not needed
uniform Light light;  
uniform Material material;
uniform GlobalLight glight;


in DATA
{
	vec3 normal;
	vec3 WorldSpacePos;
} frag_in;

out vec4 Color;
/*
vec3 calculate_global_light(GlobalLight global,vec3 normal, vec3 viewDir)
{
	  vec3 lightDir = normalize(-global.direction);
	  
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // combine results
    vec3 ambient  = global.ambient  * material.diffuse;//vec3(texture(material.diffuse, TexCoords));
    vec3 diffuse  = global.diffuse  * diff * material.diffuse;//vec3(texture(material.diffuse, TexCoords));
    vec3 specular = global.specular * spec * material.specular;//vec3(texture(material.specular, TexCoords));
    return (ambient + diffuse+ specular);
}
*/
void main()
{
	vec3 AMB = glight.ambient * material.diffuse;




	vec3 norm = normalize(frag_in.normal);
	vec3 LD = normalize(-glight.direction);
	float DIFF = max(dot(norm,LD),0.0);
	vec3 DIFFUSE = glight.diffuse * DIFF * material.diffuse;


	vec3 viewDir = normalize(ViewPos - frag_in.WorldSpacePos);
	vec3 REFLIGHT = reflect(-LD,norm);
	float SPEC = pow(max(dot(viewDir,REFLIGHT),0.0),material.shininess);
	vec3 SPECATURAL = glight.specular * SPEC * material.specular; 


	vec3 result = (AMB + DIFFUSE + SPECATURAL);


//	vec3 result = calculate_global_light(glight,norm,viewDir);




	vec3 lightDir = normalize(light.position - frag_in.WorldSpacePos);  
	float diff = max(dot(norm, lightDir), 0.0);



	vec3 reflectDir = reflect(-lightDir, norm); 
	float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);	//is shininess value of highlight
	float distance = length(light.position - frag_in.WorldSpacePos);
	float attenuation = 1.0 / (light.constant + light.linear * distance + 
    		    light.quadratic * (distance * distance));   


	vec3 ambient = light.ambient * material.diffuse;	
	vec3 diffuse = light.diffuse * diff * material.diffuse;
	vec3 specular = (light.specular  * spec * material.specular);  
	
	

	ambient  *= attenuation; //* length(frag_in.normal); 
	diffuse  *= attenuation;
	specular *= attenuation;  

	
	result += ((ambient + diffuse + specular));



	Color = vec4((result),1.f);
}
