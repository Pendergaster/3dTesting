#version 330 core
layout (location = 0) in vec2 vertPos;			// static buffer
//layout (location = 1) in vec2 textcoord;	// static buffer

layout (location = 1) in vec3 vel;
layout (location = 2) in vec2 time; // x spawn , y life
layout (location = 3) in vec3 wpos;
layout (location = 4) in float scale;
 
//uniform mat4 model;
uniform mat4 view;
uniform mat4 projection;
uniform float currentTime;

out DATA
{
		vec2 TexCoords;
		float Alpha;
} vs_out;




void main()
{		vs_out.Alpha = 1.f;

		if((currentTime - time.x) >= time.y)
		{
			vs_out.Alpha = 0.f;	
		}
		vec3  worldPos = wpos + vel * (currentTime  - time.x );
		vs_out.TexCoords = vec2(0.5f + vertPos.x , 0.5f + vertPos.y);

		vec3 camRight = vec3(view[0][0],view[1][0],view[2][0]);					
		vec3 camUp = vec3(view[0][1], view[1][1], view[2][1]);

		worldPos += camRight * vertPos.x * scale * vs_out.Alpha +
						camUp * vertPos.y * scale * vs_out.Alpha;

		gl_Position = projection * view * vec4(worldPos, 1.0f);		

		

    //gl_Position = vec4(aPos.x, aPos.y, 0.0, 1.0); 
    //TexCoords = aTexCoords;
} 

/*

CameraRight_worldspace = {ViewMatrix[0][0], ViewMatrix[1][0], ViewMatrix[2][0]}
CameraUp_worldspace = {ViewMatrix[0][1], ViewMatrix[1][1], ViewMatrix[2][1]}

vec3 vertexPosition_worldspace =
    particleCenter_wordspace
    + CameraRight_worldspace * squareVertices.x * BillboardSize.x
    + CameraUp_worldspace * squareVertices.y * BillboardSize.y;
*/
