#version 330 core


//https://www.reddit.com/r/gamedev/comments/3315sr/free_3d_models_with_textures_use_them_in_your/
struct Material {
    sampler2D diffuse;
    vec3 specular;
    float shininess;
}; 
struct Light {
    vec3 position;

    vec3 ambient;
    vec3 diffuse;
    vec3 specular;
	
	float constant;
    float linear;
    float quadratic;
};


struct GlobalLight{
	vec3 direction;
	vec3 ambient;
	vec3 diffuse;
	vec3 specular;
};

uniform vec3 ViewPos; // if you calculate in view matrix this is not needed
uniform Light light;  
uniform Material material;
uniform GlobalLight glight;
uniform vec3 LightScale;

in DATA
{
	vec2 uv;
	vec3 normal;
	vec3 WorldSpacePos;
} frag_in;

layout (location = 0) out vec4 Color;
layout (location = 1) out vec4 Bright;


const float kPi = 3.14159265;
const float gamma = 2.2f;

vec3 calculate_global_light(GlobalLight global,vec3 normal, vec3 viewDir)
{
	  vec3 lightDir = normalize(-global.direction);
	  
    // diffuse shading
    float diff = max(dot(normal, lightDir), 0.0);
    // specular shading
    vec3 reflectDir = reflect(-lightDir, normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), material.shininess);
    // combine results
    vec3 ambient  = global.ambient  * vec3(texture(material.diffuse, frag_in.uv));
    vec3 diffuse  = global.diffuse  * diff *vec3(texture(material.diffuse, frag_in.uv));
    vec3 specular = global.specular * spec * material.specular;//vec3(texture(material.specular, TexCoords));
    return (ambient + diffuse+ specular);
}

vec3 calculate_point_light(Light pl,vec3 normal, vec3 fragPos, vec3 viewDir)
{
	vec3 lightDir = normalize(pl.position - fragPos);
	float diff = max(dot(normal,lightDir),0.0);

    // specular shading
	float kEnergyConservation = ( 8.0 + material.shininess ) / ( 8.0 * kPi );
    vec3 halfwayDir = normalize( lightDir + viewDir);
    float spec = kEnergyConservation * pow(max(dot(normal, halfwayDir), 0.0), material.shininess);
    // attenuation
    float distance = length(pl.position - fragPos);
    float attenuation = 1.0 / (pl.constant + pl.linear * distance + pl.quadratic * (distance * distance));    
    // combine results
    vec3 ambient = light.ambient *  vec3(texture(material.diffuse, frag_in.uv));	
	vec3 diffuse = light.diffuse * diff * vec3(texture(material.diffuse,frag_in.uv));
    vec3 specular = light.specular * spec * material.specular;//vec3(texture(material.specular, TexCoords));
    ambient *= attenuation;
    diffuse *= attenuation;
    specular *= attenuation;
    return (ambient + diffuse + specular);
}





void main()
{
	vec3 norm = normalize(frag_in.normal);
	vec3 viewDir = normalize(ViewPos - frag_in.WorldSpacePos);

	vec3 result = calculate_global_light(glight,norm,viewDir);

	result += calculate_point_light(light,norm,frag_in.WorldSpacePos,viewDir);

	Color = vec4( pow(result , vec3(1.f/gamma))  ,1.f) ;
    Color = Color * vec4(LightScale, 1);	

    float brightness = dot(Color.rgb, vec3(0.2126, 0.7152, 0.0722));
    if(brightness > 1.0)
        Bright = vec4(Color.rgb, 1.0);
    else
        Bright = vec4(0.0, 0.0, 0.0, 1.0);


}
